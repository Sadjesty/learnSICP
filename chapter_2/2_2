#lang scheme
(define one-through-four (list 1 2 3 4))

;(cons 5 one-through-four)

(define (list-ref items n)
  (if (= n 0)
      (car items)
      (list-ref (cdr items) (- n 1))))

(define (length items)
  (if (null? items)
      0
      (+ 1 (length (cdr items)))))

(define (length-it items)
  (define (length-iter items count)
    (if (null? items)
        count
        (length-iter (cdr items) (+ count 1))))
  (length-iter items 0))

(define (append list1 list2)
  (if (null? list1)
      list2
      (cond (car list1) (append (cdr list1) list2))))

;2.17
(define (last-pair items)
  (if (= (length-it items) 1)
      (car items)
      (last-pair (cdr items))))

;(last-pair (list 23 72 149 34))

;2.18

(define (bf items)
  (if (or (null? items) (= (length-it items) 1))
      (list )
      (cons (car items) (bf (cdr items)))))
;(bf (list 1 2 3 4 5 6))
        

(define (reverse items)
  (if (or (null? items))
      (list )
      (cons (last-pair items) (reverse (bf items)))))
(reverse (list 1 4 9 16 25))