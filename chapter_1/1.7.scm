(define (sqrt-iter guess x)
  (if (good-enough? guess x)
      guess
      (sqrt-iter (improve guess x)
                 x)))
(define (improve guess x)
  (average guess (/ x guess)))
(define (average x y)
  (/ (+ x y) 2))
(define (good-enough? guess x)
  (< (abs (- (square guess) x)) 0.001))
(define (sqrt x)
  (sqrt-iter 1.0 x))

(define (alt-good-enough? prev-guess guess)
  (< (abs (- guess prev-guess)) 0.00000000001))
(define (alt-sqrt-iter guess x)
  (define new-guess (improve guess x))
  (if (alt-good-enough? guess new-guess)
      guess
      (alt-sqrt-iter new-guess x)))
(define (alt-sqrt x)
  (alt-sqrt-iter 1.0 x))
(sqrt 0.00000001)
(alt-sqrt 0.00000001)
